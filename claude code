<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Rizz Cam - Gen Alpha Edition</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Arial', sans-serif;
            background: linear-gradient(135deg, #0a0a0a 0%, #1a1a2e 50%, #16213e 100%);
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            overflow-x: hidden;
        }

        .container {
            max-width: 100vw;
            width: 100%;
            padding: 20px;
            text-align: center;
        }

        .header {
            margin-bottom: 30px;
        }

        .title {
            font-size: clamp(2rem, 5vw, 3.5rem);
            font-weight: bold;
            background: linear-gradient(45deg, #ff6b6b, #4ecdc4, #45b7d1, #96ceb4);
            background-size: 400% 400%;
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            animation: gradientShift 3s ease infinite;
            text-shadow: 0 0 30px rgba(255, 107, 107, 0.5);
            margin-bottom: 10px;
        }

        @keyframes gradientShift {
            0%, 100% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
        }

        .subtitle {
            font-size: 1.2rem;
            opacity: 0.8;
            margin-bottom: 20px;
        }

        .camera-container {
            position: relative;
            max-width: 400px;
            margin: 0 auto 30px;
            border-radius: 20px;
            overflow: hidden;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.5);
        }

        video, canvas {
            width: 100%;
            height: auto;
            display: block;
        }

        .photo-container {
            position: relative;
            display: none;
        }

        .laser-eye {
            position: absolute;
            width: 8px;
            height: 40px;
            background: linear-gradient(45deg, #ff0000, #ff4444);
            box-shadow: 0 0 20px #ff0000, 0 0 40px #ff0000;
            opacity: 0;
            transform-origin: top center;
            animation: laserGlow 0.5s ease-in-out infinite alternate;
        }

        @keyframes laserGlow {
            0% { 
                box-shadow: 0 0 20px #ff0000, 0 0 40px #ff0000;
                opacity: 0.8;
            }
            100% { 
                box-shadow: 0 0 30px #ff0000, 0 0 60px #ff0000, 0 0 80px #ff0000;
                opacity: 1;
            }
        }

        .mouth-overlay {
            position: absolute;
            width: 30px;
            height: 20px;
            border: 3px solid #ff6b6b;
            border-radius: 50%;
            background: rgba(255, 107, 107, 0.2);
            opacity: 0;
            animation: mouthTalk 0.3s ease-in-out infinite;
        }

        @keyframes mouthTalk {
            0%, 100% { transform: scaleY(1); }
            50% { transform: scaleY(0.5); }
        }

        .controls {
            display: flex;
            flex-direction: column;
            gap: 20px;
            align-items: center;
        }

        .btn {
            padding: 15px 30px;
            font-size: 1.1rem;
            font-weight: bold;
            border: none;
            border-radius: 50px;
            cursor: pointer;
            transition: all 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 1px;
            position: relative;
            overflow: hidden;
        }

        .btn-primary {
            background: linear-gradient(45deg, #ff6b6b, #4ecdc4);
            color: white;
            box-shadow: 0 10px 30px rgba(255, 107, 107, 0.4);
        }

        .btn-secondary {
            background: linear-gradient(45deg, #45b7d1, #96ceb4);
            color: white;
            box-shadow: 0 10px 30px rgba(69, 183, 209, 0.4);
        }

        .btn:hover {
            transform: translateY(-3px);
            box-shadow: 0 15px 40px rgba(255, 107, 107, 0.6);
        }

        .btn:active {
            transform: translateY(-1px);
        }

        .btn-secondary:hover {
            box-shadow: 0 15px 40px rgba(69, 183, 209, 0.6);
        }

        .listening {
            background: linear-gradient(45deg, #ff4444, #ff6666) !important;
            animation: pulse 1s ease-in-out infinite;
        }

        @keyframes pulse {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.05); }
        }

        .status {
            margin-top: 20px;
            font-size: 1.1rem;
            opacity: 0.8;
            min-height: 25px;
        }

        .hidden {
            display: none !important;
        }

        .particle {
            position: absolute;
            width: 4px;
            height: 4px;
            background: #4ecdc4;
            border-radius: 50%;
            pointer-events: none;
            animation: float 6s ease-in-out infinite;
        }

        @keyframes float {
            0%, 100% { transform: translateY(0px) rotate(0deg); opacity: 1; }
            50% { transform: translateY(-20px) rotate(180deg); opacity: 0.5; }
        }

        @media (max-width: 480px) {
            .container {
                padding: 10px;
            }
            
            .btn {
                width: 100%;
                max-width: 300px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1 class="title">RIZZ CAM</h1>
            <p class="subtitle">Gen Alpha Edition üî•</p>
        </div>

        <div class="camera-container">
            <video id="video" autoplay playsinline></video>
            <canvas id="canvas" class="hidden"></canvas>
            <div id="photo-container" class="photo-container">
                <canvas id="photo-canvas"></canvas>
                <div id="laser-left" class="laser-eye"></div>
                <div id="laser-right" class="laser-eye"></div>
                <div id="mouth-overlay" class="mouth-overlay"></div>
            </div>
        </div>

        <div class="controls">
            <button id="capture-btn" class="btn btn-primary">üì∏ Capture Your Rizz</button>
            <button id="listen-btn" class="btn btn-secondary hidden">üé§ Activate Rizz Mode</button>
            <button id="retake-btn" class="btn btn-secondary hidden">üîÑ Retake Photo</button>
        </div>

        <div id="status" class="status">Say "Hi" or "Hello" to activate the rizz! üòé</div>
    </div>

    <audio id="background-music" loop>
        <!-- Placeholder for background music file -->
    </audio>

    <script>
        class RizzCam {
            constructor() {
                this.video = document.getElementById('video');
                this.canvas = document.getElementById('canvas');
                this.photoCanvas = document.getElementById('photo-canvas');
                this.photoContainer = document.getElementById('photo-container');
                this.captureBtn = document.getElementById('capture-btn');
                this.listenBtn = document.getElementById('listen-btn');
                this.retakeBtn = document.getElementById('retake-btn');
                this.status = document.getElementById('status');
                this.backgroundMusic = document.getElementById('background-music');
                
                this.laserLeft = document.getElementById('laser-left');
                this.laserRight = document.getElementById('laser-right');
                this.mouthOverlay = document.getElementById('mouth-overlay');
                
                this.recognition = null;
                this.isListening = false;
                this.photoTaken = false;
                this.faceDetected = false;
                
                // Sample Gen Alpha rizz phrases - replace with your folder content
                this.rizzPhrases = [
                    "Yo, you're absolutely fire! No cap! üî•",
                    "Damn, you got that main character energy! üíØ",
                    "Respectfully, you're the moment! ‚ú®",
                    "Sheesh, you're giving main character vibes! üåü",
                    "Bro, you're literally glowing up! üåü",
                    "Facts, you're serving looks! üíÖ",
                    "Periodt, you're the blueprint! üìê",
                    "Lowkey, you're the standard! üëë",
                    "Not gonna lie, you're iconic! üé≠",
                    "Straight up, you're unmatched! üèÜ"
                ];
                
                // Sample audio files - replace with your folder content
                this.audioFiles = [
                    // Placeholder for audio file paths
                    'audio/rizz1.mp3',
                    'audio/rizz2.mp3',
                    'audio/rizz3.mp3'
                ];
                
                this.init();
            }
            
            init() {
                this.setupCamera();
                this.setupEventListeners();
                this.setupSpeechRecognition();
                this.createParticles();
            }
            
            createParticles() {
                for (let i = 0; i < 20; i++) {
                    const particle = document.createElement('div');
                    particle.className = 'particle';
                    particle.style.left = Math.random() * 100 + '%';
                    particle.style.animationDelay = Math.random() * 6 + 's';
                    particle.style.animationDuration = (Math.random() * 3 + 3) + 's';
                    document.body.appendChild(particle);
                }
            }
            
            async setupCamera() {
                try {
                    const stream = await navigator.mediaDevices.getUserMedia({
                        video: { 
                            facingMode: 'user',
                            width: { ideal: 400 },
                            height: { ideal: 300 }
                        },
                        audio: false
                    });
                    this.video.srcObject = stream;
                } catch (err) {
                    console.error('Error accessing camera:', err);
                    this.status.textContent = 'Camera access denied. Please allow camera access to use Rizz Cam! üì±';
                }
            }
            
            setupEventListeners() {
                this.captureBtn.addEventListener('click', () => this.capturePhoto());
                this.listenBtn.addEventListener('click', () => this.toggleListening());
                this.retakeBtn.addEventListener('click', () => this.retakePhoto());
            }
            
            setupSpeechRecognition() {
                if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {
                    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
                    this.recognition = new SpeechRecognition();
                    this.recognition.continuous = true;
                    this.recognition.interimResults = true;
                    this.recognition.lang = 'en-US';
                    
                    this.recognition.onresult = (event) => {
                        const transcript = Array.from(event.results)
                            .map(result => result[0].transcript)
                            .join('')
                            .toLowerCase();
                        
                        if (transcript.includes('hi') || transcript.includes('hello')) {
                            this.activateRizz();
                        }
                    };
                    
                    this.recognition.onerror = (event) => {
                        console.error('Speech recognition error:', event.error);
                    };
                } else {
                    this.status.textContent = 'Speech recognition not supported in this browser üò¢';
                }
            }
            
            capturePhoto() {
                const context = this.canvas.getContext('2d');
                this.canvas.width = this.video.videoWidth;
                this.canvas.height = this.video.videoHeight;
                
                context.drawImage(this.video, 0, 0);
                
                const photoContext = this.photoCanvas.getContext('2d');
                this.photoCanvas.width = this.video.videoWidth;
                this.photoCanvas.height = this.video.videoHeight;
                photoContext.drawImage(this.video, 0, 0);
                
                this.video.style.display = 'none';
                this.photoContainer.style.display = 'block';
                this.captureBtn.classList.add('hidden');
                this.listenBtn.classList.remove('hidden');
                this.retakeBtn.classList.remove('hidden');
                
                this.photoTaken = true;
                this.detectFace();
                this.status.textContent = 'Photo captured! Press the mic button and say "Hi" or "Hello" to activate your rizz! üé§';
            }
            
            detectFace() {
                // Simplified face detection - positions eyes and mouth approximately
                const canvasWidth = this.photoCanvas.width;
                const canvasHeight = this.photoCanvas.height;
                
                // Approximate face positions (in a real app, you'd use proper face detection)
                const faceWidth = canvasWidth * 0.6;
                const faceHeight = canvasHeight * 0.7;
                const faceX = (canvasWidth - faceWidth) / 2;
                const faceY = canvasHeight * 0.15;
                
                // Position laser eyes
                const eyeY = faceY + faceHeight * 0.3;
                const eyeDistance = faceWidth * 0.25;
                const centerX = canvasWidth / 2;
                
                this.laserLeft.style.left = (centerX - eyeDistance) + 'px';
                this.laserLeft.style.top = eyeY + 'px';
                this.laserRight.style.left = (centerX + eyeDistance) + 'px';
                this.laserRight.style.top = eyeY + 'px';
                
                // Position mouth
                const mouthY = faceY + faceHeight * 0.7;
                this.mouthOverlay.style.left = (centerX - 15) + 'px';
                this.mouthOverlay.style.top = mouthY + 'px';
                
                this.faceDetected = true;
            }
            
            toggleListening() {
                if (!this.isListening) {
                    this.startListening();
                } else {
                    this.stopListening();
                }
            }
            
            startListening() {
                if (this.recognition) {
                    this.recognition.start();
                    this.isListening = true;
                    this.listenBtn.textContent = 'üî¥ Listening...';
                    this.listenBtn.classList.add('listening');
                    this.status.textContent = 'Listening for "Hi" or "Hello"... üëÇ';
                }
            }
            
            stopListening() {
                if (this.recognition) {
                    this.recognition.stop();
                    this.isListening = false;
                    this.listenBtn.textContent = 'üé§ Activate Rizz Mode';
                    this.listenBtn.classList.remove('listening');
                    this.status.textContent = 'Stopped listening. Click to activate again! üé§';
                }
            }
            
            activateRizz() {
                if (!this.photoTaken || !this.faceDetected) return;
                
                this.stopListening();
                
                // Activate laser eyes
                this.laserLeft.style.opacity = '1';
                this.laserRight.style.opacity = '1';
                
                // Activate mouth animation
                this.mouthOverlay.style.opacity = '1';
                
                // Get random phrase
                const randomPhrase = this.rizzPhrases[Math.floor(Math.random() * this.rizzPhrases.length)];
                
                // Start background music
                this.playBackgroundMusic();
                
                // Speak the phrase
                this.speakPhrase(randomPhrase);
                
                this.status.textContent = 'RIZZ ACTIVATED! üî•üíØ';
            }
            
            playBackgroundMusic() {
                // Create a simple background music using Web Audio API
                const audioContext = new (window.AudioContext || window.webkitAudioContext)();
                const oscillator = audioContext.createOscillator();
                const gainNode = audioContext.createGain();
                
                oscillator.connect(gainNode);
                gainNode.connect(audioContext.destination);
                
                oscillator.frequency.setValueAtTime(200, audioContext.currentTime);
                oscillator.frequency.exponentialRampToValueAtTime(400, audioContext.currentTime + 0.5);
                oscillator.frequency.exponentialRampToValueAtTime(200, audioContext.currentTime + 1);
                
                gainNode.gain.setValueAtTime(0, audioContext.currentTime);
                gainNode.gain.linearRampToValueAtTime(0.1, audioContext.currentTime + 0.1);
                gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 3);
                
                oscillator.start(audioContext.currentTime);
                oscillator.stop(audioContext.currentTime + 3);
            }
            
            speakPhrase(text) {
                const utterance = new SpeechSynthesisUtterance(text);
                utterance.rate = 1.2;
                utterance.pitch = 1.1;
                utterance.volume = 0.9;
                
                // Make voice more robotic
                const voices = speechSynthesis.getVoices();
                const roboticVoice = voices.find(voice => 
                    voice.name.includes('Google') || 
                    voice.name.includes('Microsoft') ||
                    voice.name.includes('Alex')
                );
                if (roboticVoice) utterance.voice = roboticVoice;
                
                utterance.onstart = () => {
                    this.status.textContent = 'Speaking your rizz... üó£Ô∏è';
                };
                
                utterance.onend = () => {
                    this.deactivateRizz();
                };
                
                speechSynthesis.speak(utterance);
            }
            
            deactivateRizz() {
                // Deactivate laser eyes
                this.laserLeft.style.opacity = '0';
                this.laserRight.style.opacity = '0';
                
                // Deactivate mouth animation
                this.mouthOverlay.style.opacity = '0';
                
                this.status.textContent = 'Rizz complete! Say "Hi" or "Hello" again to activate! üòé';
                
                // Reset listening
                setTimeout(() => {
                    this.listenBtn.textContent = 'üé§ Activate Rizz Mode';
                    this.listenBtn.classList.remove('listening');
                }, 1000);
            }
            
            retakePhoto() {
                this.video.style.display = 'block';
                this.photoContainer.style.display = 'none';
                this.captureBtn.classList.remove('hidden');
                this.listenBtn.classList.add('hidden');
                this.retakeBtn.classList.add('hidden');
                
                this.photoTaken = false;
                this.faceDetected = false;
                this.stopListening();
                
                this.status.textContent = 'Ready to capture your rizz! üì∏';
            }
        }
        
        // Initialize the app when the page loads
        window.addEventListener('load', () => {
            new RizzCam();
        });
    </script>
</body>
</html>
